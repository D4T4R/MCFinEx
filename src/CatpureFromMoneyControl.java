/**
 * This code is only for education purpose only. No financial transactions should be made based on the data generated by this code.
 */


import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.StringTokenizer;

import org.openqa.selenium.By;

import org.openqa.selenium.WebElement;

import org.openqa.selenium.support.ui.ExpectedConditions;

import com.utils.DBUtils;
import com.utils.SeleniumSupport;

public class CatpureFromMoneyControl {

	private static String sURL = "https://www.moneycontrol.com/india/stockpricequote/refineries/relianceindustries/RI";

	private static String getCompanyList = "SELECT * FROM STOCK_MASTER where SCANFORRESULTS = 'Y' ORDER BY 1 desc";
	private static String getCompanyListLike = "SELECT * FROM STOCK_MASTER WHERE COMPANYCODE LIKE \'{COMPANYCODE}\'%";
	private static String getCompanyRow = "SELECT * FROM STOCK_MASTER WHERE COMPANYCODE = \'{COMPANYCODE}\'";
	private static String getResultList = "SELECT * FROM Stocks_results_for_current_quarter where FINANCIAL_QUARTER = \'{CURRENT_QUARTER}\'  order by 1 desc";
	SeleniumSupport objSS = new SeleniumSupport();

	public static void main(String[] args) throws Exception {
		new CatpureFromMoneyControl().gatherDataFromMoneyControl(args);
	}

	private void gatherDataFromMoneyControl(String[] args) throws Exception {
		try {
			LocalDateTime t1 = LocalDateTime.now();
			System.out.println("Command-Line arguments are");

			// loop through all arguments

			objSS.initBrowser(args[0], sURL);

			if (1 == args.length)
				gatherDataForAllStocks();
			else if ("ONLYRESULTS".equals(args[1])) {
				gatherDataForResultStocks();
			} /*
				 * else if ("STARTING WITH".equals(args[1])) {
				 * gatherDataForCompaniesStartingWith(); }
				 */
			else {
				gatherDataForCompany(args[1]);
			}

			objSS.shutdownChrome();
			LocalDateTime t2 = LocalDateTime.now();
			System.out.println(Duration.between(t2, t1).toMinutes());
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			objSS.shutdownChrome();
		}
	}

	private void getStockData(String strSearchByName) throws Exception {

		int iRetries = 0;
		int iResetSearchBox = 0;
		String sISIN = null;
		String sCompanyName = null;
		String sIndustryPE = null;
		String sBookValue = null;
		String sDivYield = null;
		String sCurrentPrice = null;
		String sStandConsolidated = null;
		String sTabId = null;
		String sShareCapital = null;
		String sReservesAndSurplus = null;
		String sCurrentLiability = null;
		String sOtherLiability = null;
		String sTotalliability = null;
		String sCurrentAssets = null;
		String sEBIT = null;
		String sCFOperatingActivities = null;
		String sCFInvestingActivities = null;
		String sCFFinancingActivities = null;
		String sMarketCap = null;
		String sSector = null;
		String sCompanyCode = null;
		String[] sLastUpdatedQuarter = null;
		DBUtils objDBUtils = new DBUtils();

		Date dStartTime = new Date();

		objSS.refreshPage();
		HashMap<String, String> hmStockMaster = new HashMap<String, String>();
		HashMap<String, String> hmStockFinancials = new HashMap<String, String>();
		HashMap<String, String> hmEV2EBITDA = new HashMap<String, String>();
		HashMap<String, String> hmEPSYearly = new HashMap<String, String>();
		HashMap<String, String> hmEPSQuarterly = new HashMap<String, String>();

		hmStockMaster.put("TABLE", "STOCK_MASTER");
		hmStockFinancials.put("TABLE", "STOCK_FINANCIALS");
		hmEV2EBITDA.put("TABLE", "STOCK_EV2EBITDA_VALUATIONS");
		hmEPSYearly.put("TABLE", "STOCK_EPS_YEARLY_VALUATIONS");
		hmEPSQuarterly.put("TABLE", "STOCK_EPS_QUARTERLY_VALUATIONS");

		do {
			iResetSearchBox = 0;
			if (iRetries > 1) {
				objSS.makeMeWait(2000);
			}
			// System.out.println("existing value : " + getElementValuebyXpath("Search
			// name","//*[@id=\"search_str\"]"));
			while (!"-8888888".equals(objSS.getElementValuebyXpath("Search name", "//*[@id=\"search_str\"]"))
					&& iResetSearchBox < 3) {
				objSS.setElementValuebyXpath("Search name", "//*[@id=\"search_str\"]", "");
				System.out.println("Try clearing search box "
						+ objSS.getElementValuebyXpath("Search name", "//*[@id=\"search_str\"]") + " "
						+ iResetSearchBox);
				iResetSearchBox++;
			}
			if (3 == iResetSearchBox) {
				System.out.println("Could not find Search Textbox. Try to reload browser");
				objSS.drv.navigate().refresh();
				return;
			}
			System.out.println(" strSearchByName " + strSearchByName);

			objSS.setElementValuebyXpath("Search name", "//*[@id=\"search_str\"]", strSearchByName);
			objSS.makeMeWait(1000);

			objSS.clickOnElementbyXpathSuggestionBox("Search Results", "//*[@id=\"autosuggestlist\"]/ul/li/a",
					strSearchByName);

			objSS.makeMeWait(2000);

			iRetries++;
			System.out.println("Attempt  " + iRetries);
		} while (iRetries < 5 && !strSearchByName
				.equals(objSS.getElementValuebyXpath("Company code", "//*[@id=\"company_info\"]/ul/li[5]/ul/li[2]/p")));

		// Get main page company details
		sCompanyCode = objSS.getElementValuebyXpath("Company code", "//*[@id=\"company_info\"]/ul/li[5]/ul/li[2]/p");
		sISIN = objSS.getElementValuebyXpath("ISIN", "//*[@id=\"company_info\"]/ul/li[5]/ul/li[4]/p");
		sCompanyName = objSS.getElementValuebyXpath("Company name", "//*[@id=\"stockName\"]/h1");

		System.out.println("sCompanyName: " + sCompanyName + "  - sISIN: " + sISIN);

		if (!sCompanyCode.equals(strSearchByName))
			return;

		hmStockMaster.put("COMPANYCODE", sCompanyCode);
		hmStockFinancials.put("COMPANYCODE", sCompanyCode);
		hmEV2EBITDA.put("COMPANYCODE", sCompanyCode);
		hmEPSYearly.put("COMPANYCODE", sCompanyCode);
		hmEPSQuarterly.put("COMPANYCODE", sCompanyCode);

		hmStockMaster.put("ISIN_CODE", sISIN);
		hmStockMaster.put("COMPANY_NAME", sCompanyName);

		// determine if company has consolidated or stand alone entity
		sStandConsolidated = isConsolidatedOrStandalone("//*[@id=\"stand\"]/a");
		System.out.println("sStandConsolidated " + sStandConsolidated);

		if ("consolidated".equals(sStandConsolidated)) {
			objSS.clickOnElementbyXpath("Quarterly Results", "//*[@id=\"quarc\"]/span");
			sLastUpdatedQuarter = getLastUpdatedQuarter("Last Quarter data", "//*[@id=\"C-3-revenue\"]/div");
		} else {
			objSS.clickOnElementbyXpath("Quarterly Results", "//*[@id=\"quar\"]/span");
			sLastUpdatedQuarter = getLastUpdatedQuarter("Last Quarter data", "//*[@id=\"S-3-revenue\"]/div");
		}

		if (null == sLastUpdatedQuarter[1]) {
			System.out.println(sCompanyName + " - Current Quarter data could not be retrieved. Retrying");
			// give it a second try
			sLastUpdatedQuarter = getLastUpdatedQuarter("Last Quarter data", "//*[@id=\"C-3-revenue\"]/div");
		}

		if (!isDataForCurrentQuarter(sLastUpdatedQuarter[1])) {
			System.out.println(sCompanyName + " - Current Quarter data not available");
			// update last updated on

			hmStockMaster.put("LAST_UPDATED", LocalDate.now().toString());
			objDBUtils.setData(hmStockMaster);
			return;
		}

		/*
		 * if (!checkIfCurrentQuarterResultsAreAvailable(sStandConsolidated)) {
		 * System.out.println(sCompanyName + " - Current Quarter data not available");
		 * //update last updated on
		 * sheet.getRow(iStockRowNum).getCell(84).setCellValue(LocalDate.now().toString(
		 * )); writeWorkBook(); return; }
		 */

		sCurrentPrice = objSS.getElementValuebyXpath("Current Price",
				"//*[@id=\"inp_nse\"]/div/div[1]/div/div[2]/div[7]/div[2]/div[2]/span[1]");
		sIndustryPE = objSS.getElementValuebyXpath("Industry PE",
				"//*[@id=\"stk_overview\"]/div[1]/div[1]/div[3]/table/tbody/tr[3]/td[2]");
		sBookValue = objSS.getElementValuebyXpath("Book Value",
				"//*[@id=\"stk_overview\"]/div[1]/div[1]/div[3]/table/tbody/tr[4]/td[2]");
		sDivYield = objSS.getElementValuebyXpath("div Yield",
				"//*[@id=\"stk_overview\"]/div[1]/div[1]/div[4]/table/tbody/tr[2]/td[2]");
		sMarketCap = objSS.getElementValuebyXpath("Market cap",
				"//*[@id=\"stk_overview\"]/div[1]/div[1]/div[4]/table/tbody/tr[1]/td[2]");
		sSector = objSS.getElementValuebyXpath("Sector", "//*[@id=\"stockName\"]/span/strong/a");

		hmStockFinancials.put("COMPANYCODE", sCompanyCode);
		hmStockFinancials.put("CURRENT_PRICE", sCurrentPrice);
		hmStockFinancials.put("INDUSTRY_PE", sIndustryPE);
		hmStockFinancials.put("DIVIDEND_YIELD", sDivYield);
		hmStockFinancials.put("BOOK_VALUE_PER_SHARE", sBookValue);
		hmStockFinancials.put("MARKET_CAPITAL", sMarketCap);

		hmStockMaster.put("CAPITAL", sMarketCap);
		hmStockMaster.put("SECTOR", sSector);

		if (2000 > Float.parseFloat(sMarketCap)) {
			// update last quarter results
			hmStockMaster.put("LAST_UPDATED_QUARTER", getCurrentQuarter());

			// update last updated on
			hmStockMaster.put("LAST_UPDATED", LocalDate.now().toString());

			objDBUtils.setData(hmStockMaster);

			return;
		}
		// System.out.println("sIndustryPE " + sIndustryPE + " sBookValue " + sBookValue
		// + " sDivYield " + sDivYield + " sCurrentPrice " + sCurrentPrice);

		getShareHoldingPattern(hmStockFinancials);

		if ("consolidated".equals(sStandConsolidated)) {
			objSS.clickOnElementbyXpath("Balance Sheet", "//*[@id=\"consolidated\"]/div[1]/ul/li[3]/a");
			sTabId = "balance-sheet";
		} else {
			objSS.clickOnElementbyXpath("Balance Sheet", "//*[@id=\"standalone\"]/div[1]/ul/li[3]/a");
			sTabId = "stand_balance-sheet";
		}

		objSS.makeMeWait(2000);

		// get company high level balance sheet data

		sShareCapital = objSS.getElementValuebyXpath("Share Capital",
				"//*[@id=\"" + sTabId + "\"]/div[1]/div/table/tbody/tr[1]/td[2]");
		sReservesAndSurplus = objSS.getElementValuebyXpath("reserves and surplus ",
				"//*[@id=\"" + sTabId + "\"]/div[1]/div/table/tbody/tr[2]/td[2]");
		sCurrentLiability = objSS.getElementValuebyXpath("Current Liabilities",
				"//*[@id=\"" + sTabId + "\"]/div[1]/div/table/tbody/tr[3]/td[2]");
		sOtherLiability = objSS.getElementValuebyXpath("Other Liabilities",
				"//*[@id=\"" + sTabId + "\"]/div[1]/div/table/tbody/tr[4]/td[2]");
		sTotalliability = objSS.getElementValuebyXpath("Total Liabilities",
				"//*[@id=\"" + sTabId + "\"]/div[1]/div/table/tbody/tr[5]/td[2]");
		sCurrentAssets = objSS.getElementValuebyXpath("Current Assets",
				"//*[@id=\"" + sTabId + "\"]/div[2]/div/table/tbody/tr[2]/td[2]");
		// System.out.println("sShareCapital " + sShareCapital + " sReservesAndSurplus "
		// + sReservesAndSurplus + " sCurrentLiability " + sCurrentLiability +
		// " sOtherLiability " + sOtherLiability + " sTotalliability " +sTotalliability
		// + " sCurrentAssets " + sCurrentAssets);
		hmStockFinancials.put("CAPITAL", sShareCapital);
		hmStockFinancials.put("RESERVES", sReservesAndSurplus);
		hmStockFinancials.put("CURRENT_LIABILITY", sCurrentLiability);
		hmStockFinancials.put("OTHER_LIABILITY", sOtherLiability);
		hmStockFinancials.put("TOTAL_LIABILITY", sTotalliability);
		hmStockFinancials.put("CURRENT_ASSET", sCurrentAssets);

		// get company income statement data

		if ("consolidated".equals(sStandConsolidated)) {
			objSS.clickOnElementbyXpath("Income Statement", "//*[@id=\"consolidated\"]/div[1]/ul/li[2]/a");
			// clickOnElementbyXpath("Annual",
			// "//*[@id=\"income_statement\"]/div[1]/ul/li[4]/a");
			objSS.makeMeWait(500);
			objSS.clickOnElementbyXpath("Annual", "//*[@id=\"income_statement\"]/div[1]/ul/li[4]/a");
			objSS.makeMeWait(2000);
			sEBIT = objSS.getElementValuebyXpath("EBIT", "//*[@id=\"C-income_statement-12\"]/table/tbody/tr[5]/td[2]");
		} else {

			objSS.clickOnElementbyXpath("Income Statement", "//*[@id=\"standalone\"]/div[1]/ul/li[2]/a");
			try {
				objSS.makeMeWait(2000);
				// *[@id="stand_income_statement"]/div[1]/ul/li[4]/a
				objSS.clickOnElementbyXpath("Annual", "//*[@id=\"stand_income_statement\"]/div[1]/ul/li[4]/a");
			} catch (Exception e) {
				objSS.makeMeWait(5000);
				objSS.clickOnElementbyXpath("Annual", "//*[@id=\"stand_income_statement\"]/div[1]/ul/li[4]/a");
			}
			objSS.makeMeWait(2000);
			sEBIT = objSS.getElementValuebyXpath("EBIT", "//*[@id=\"S-income_statement-12\"]/table/tbody/tr[5]/td[2]");
		}

		hmStockFinancials.put("EBIT", sEBIT);

		// get cash flow data
		if ("consolidated".equals(sStandConsolidated)) {
			objSS.clickOnElementbyXpath("Cash Flow", "//*[@id=\"consolidated\"]/div[1]/ul/li[4]/a");
			objSS.makeMeWait(2000);
			sCFOperatingActivities = objSS.getElementValuebyXpath("Operating activities ",
					"//*[@id=\"cash-flow\"]/div[1]/table/tbody/tr[1]/td[2]");
			sCFInvestingActivities = objSS.getElementValuebyXpath("Investing Activities ",
					"//*[@id=\"cash-flow\"]/div[1]/table/tbody/tr[2]/td[2]");
			sCFFinancingActivities = objSS.getElementValuebyXpath("Financing Activities ",
					"//*[@id=\"cash-flow\"]/div[1]/table/tbody/tr[3]/td[2]");
		} else {
			objSS.clickOnElementbyXpath("Cash Flow", "//*[@id=\"standalone\"]/div[1]/ul/li[4]/a");
			objSS.makeMeWait(2000);
			sCFOperatingActivities = objSS.getElementValuebyXpath("Operating activities ",
					"//*[@id=\"stand_cash-flow\"]/div[1]/table/tbody/tr[1]/td[2]");
			sCFInvestingActivities = objSS.getElementValuebyXpath("Investing Activities ",
					"//*[@id=\"stand_cash-flow\"]/div[1]/table/tbody/tr[2]/td[2]");
			sCFFinancingActivities = objSS.getElementValuebyXpath("Financing Activities ",
					"//*[@id=\"stand_cash-flow\"]/div[1]/table/tbody/tr[3]/td[2]");
		}

		hmStockFinancials.put("OPERATING_CASHFLOW", sCFOperatingActivities);
		hmStockFinancials.put("INVESTING_CASHFLOW", sCFInvestingActivities);
		hmStockFinancials.put("FINANCING_CASHFLOW", sCFFinancingActivities);

		if ("consolidated".equals(sStandConsolidated))
			objSS.clickOnElementbyXpath("Ratio", "//*[@id=\"consolidated\"]/div[2]/div[2]/div/ul/li[8]/a");
		else
			objSS.clickOnElementbyXpath("Ratio", "//*[@id=\"standalone\"]/div[2]/div[2]/div/ul/li[8]/a");

		objSS.changeBrowserTab();
		// get ratio data
		getRatioTabData(hmStockFinancials, hmEV2EBITDA, hmEPSYearly, sStandConsolidated);

		objSS.changeBrowserTab();

		// get quarterly data
		getQuarterlyResults(hmStockFinancials, hmEPSQuarterly, sStandConsolidated);

		objSS.changeBrowserTab();

		// get balance sheet data
		getBalanceSheetData(hmEV2EBITDA, sStandConsolidated);

		objSS.changeBrowserTab();

		// get capital structure data
		getCapitalStructureData(hmEV2EBITDA);

		computeEV2EBITDAValuation(hmStockFinancials, hmEV2EBITDA);
		computeEPSValuation(hmStockFinancials, hmEPSYearly, "Y");
		computeEPSValuation(hmStockFinancials, hmEPSQuarterly, "Q");
		// Update last updated Quarter
		hmStockMaster.put("LAST_UPDATED_QUARTER", getCurrentQuarter());

		// update last updated on
		hmStockMaster.put("LAST_UPDATED", LocalDate.now().toString());

		// close all open tabs

		closeOtherTabs();

		objDBUtils.setData(hmStockMaster);
		objDBUtils.setData(hmStockFinancials);
		objDBUtils.setData(hmEV2EBITDA);
		objDBUtils.setData(hmEPSYearly);
		objDBUtils.setData(hmEPSQuarterly);

		System.out.println("Time taken to process : " + sCompanyName + " "
				+ (new Date().getTime() - dStartTime.getTime()) / 1000 + " Sec");

	}

	private void closeOtherTabs() {
		for (String handle : objSS.drv.getWindowHandles()) {
			String sTitle = objSS.drv.switchTo().window(handle).getTitle();
			if (sTitle.contains("Ratio") || sTitle.contains("Quarterly") || sTitle.contains("Balance")
					|| sTitle.contains("Statement")) {
				objSS.drv.switchTo().window(handle).close();
			}
		}

		for (String handle : objSS.drv.getWindowHandles()) {
			objSS.drv.switchTo().window(handle);
		}
	}

	private String isConsolidatedOrStandalone(String strXPath) throws Exception {
		try {
			WebElement webelmt = objSS.drv.findElement(By.xpath(strXPath + "/.."));
			if ("active".equals(webelmt.getAttribute("Class"))) {
				if ("stand".equals(webelmt.getAttribute("id"))) {
					return "standalone";
				}
			}
			return "consolidated";

		} catch (Exception e) {
			System.out.println("Could not determine if standalone");
			throw new Exception("Could not determine if standalone");
		}
	}

	private String[] getLastUpdatedQuarter(String strElementCommonName, String strXPath) {

		WebElement weSVG = null;
		WebElement webelmt = objSS.findElementByXPath(strXPath);
		String[] sChartValue = new String[2];
		try {

			if (null != webelmt) {
				// System.out.println(strElementCommonName + " webelmt.isDisplayed() " +
				// webelmt.isDisplayed() + " string " + webelmt.toString());
				objSS.action.moveToElement(webelmt);
				objSS.wait.until(ExpectedConditions.visibilityOf(webelmt));
				objSS.action.moveToElement(webelmt);
				// System.out.println(webelmt.getText());

				weSVG = webelmt.findElement(By.className("highcharts-root"));

				// System.out.println("svg " + weSVG.getText());
				StringTokenizer st = new StringTokenizer(weSVG.getText(), System.lineSeparator());
				String strValue = null;
				String strPreviousValue = null;
				do {
					strPreviousValue = strValue;
					strValue = st.nextToken();
				} while (!"Revenue".equals(strValue));

				if (null != strPreviousValue) {
					strValue = strPreviousValue.substring(0, strPreviousValue.length() / 2);
					// System.out.println("Last bar value " + strValue);
					sChartValue[0] = strValue;
					// System.out.println("Last quarter results " +
					// weSVG.getText().substring(weSVG.getText().indexOf("Revenue"),weSVG.getText().indexOf(System.lineSeparator()+"0"+System.lineSeparator())));
				}

				do {
					strPreviousValue = strValue;
					strValue = st.nextToken();
				} while (!"0".equals(strValue));

				sChartValue[1] = strPreviousValue;
				System.out.println("Last bar x-axis value " + strPreviousValue);

				if (webelmt.getText().strip().length() > 0)
					return sChartValue;
				else
					return sChartValue;
			} else
				return sChartValue;
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("----------Could not action Element  " + strElementCommonName);
			// e.printStackTrace();
			return sChartValue;
		}
	}

	private void gatherDataForAllStocks() {
		String cLastUpdated = null;
		String sLastUpdatedDate = null;
		String sCompanyCode = null;
		String sCapital = null;
		String sISINCode = null;
		DBUtils objDBUtils = new DBUtils();
		ArrayList<HashMap<String, String>> alData;
		Iterator<HashMap<String, String>> iList = null;
		HashMap<String, String> hmData = null;
		// Iterate through each rows one by one
		/*
		 * Iterator<Row> rowIterator = sheet.iterator(); while (rowIterator.hasNext())
		 * Row row = rowIterator.next();
		 */
		// XSSFSheet sheet = openExcelSheet(sBrowser);

		alData = objDBUtils.getResults(getCompanyList);

		iList = alData.iterator();

		while (iList.hasNext()) {
			hmData = iList.next();
			try {
				// Iterate through each rows one by one
				/*
				 * Iterator<Row> rowIterator = sheet.iterator(); while (rowIterator.hasNext())
				 * Row row = rowIterator.next();
				 */

				cLastUpdated = hmData.get("LAST_UPDATED_QUARTER");
				sLastUpdatedDate = hmData.get("LAST_UPDATED");
				sCapital = hmData.get("CAPITAL");

				if (null != sLastUpdatedDate && sLastUpdatedDate.equals(LocalDate.now().toString())) {
					System.out.println(
							"Company : " + hmData.get("COMPANY_NAME") + " is already updated / checked today.");
				} else if (cLastUpdated == null || sLastUpdatedDate == null
						|| !sLastUpdatedDate.equals(LocalDate.now().toString())) {
					System.out.println(
							"cLastUpdated - " + cLastUpdated + " getCurrentQuarter() : " + getCurrentQuarter());
					if (cLastUpdated == null || !cLastUpdated.equals(getCurrentQuarter())) {
						// For each row, iterate through all the columns
						sCompanyCode = hmData.get("COMPANYCODE");
						sISINCode = hmData.get("ISIN_CODE");
						if (sCompanyCode != null && !"xxxxxxxx".equals(sCompanyCode)) {
							if (sISINCode != null && !sISINCode.startsWith("INF")) {
								if (sCapital == null || (sCapital != null && Integer.valueOf(sCapital) > 2500)) {
									gatherDataForCompany(sCompanyCode);
									//getStockData(sCompanyCode);
								}
							}
						}

					} else {
						System.out.println(
								"Company : " + hmData.get("COMPANY_NAME") + " is already updated for this quarter.");
					}
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private void gatherDataForResultStocks() {
		String cLastUpdated = null;
		String sCompanyCode = null;
		DBUtils objDBUtils = new DBUtils();
		ArrayList<HashMap<String, String>> alData;
		Iterator<HashMap<String, String>> iList = null;
		HashMap<String, String> hmData = null;
		// Iterate through each rows one by one
		/*
		 * Iterator<Row> rowIterator = sheet.iterator(); while (rowIterator.hasNext())
		 * Row row = rowIterator.next();
		 */
		// XSSFSheet sheet = openExcelSheet(sBrowser);

		alData = objDBUtils.getResults(getResultList.replace("{CURRENT_QUARTER}", getCurrentQuarter()));

		iList = alData.iterator();

		while (iList.hasNext()) {
			hmData = iList.next();
			try {

				cLastUpdated = hmData.get("FINANCIAL_QUARTER");

				if (cLastUpdated.equals(getCurrentQuarter())) {
					System.out.println("Result Updated on - " + cLastUpdated + " Result Updated in Quarter : "
							+ getCurrentQuarter());
					// For each row, iterate through all the columns
					sCompanyCode = hmData.get("COMPANYCODE");
					if (sCompanyCode != null && !"xxxxxxxx".equals(sCompanyCode)) {
						gatherDataForCompany(sCompanyCode);
					}
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private void gatherDataForCompany(String sCompanyCode) {
		String cLastUpdated = null;
		String sLastUpdatedDate = null;
		DBUtils objDBUtils = new DBUtils();
		ArrayList<HashMap<String, String>> alData;
		Iterator<HashMap<String, String>> iList = null;
		HashMap<String, String> hmData = null;
		try {
			// Iterate through each rows one by one
			/*
			 * Iterator<Row> rowIterator = sheet.iterator(); while (rowIterator.hasNext())
			 * Row row = rowIterator.next();
			 */
			// XSSFSheet sheet = openExcelSheet(sBrowser);
			if (sCompanyCode == null)
				return;

			alData = objDBUtils.getResults(getCompanyRow.replace("{COMPANYCODE}", sCompanyCode));

			iList = alData.iterator();

			while (iList.hasNext()) {
				hmData = iList.next();

				if (sCompanyCode.equalsIgnoreCase(hmData.get("COMPANYCODE"))) {

					cLastUpdated = hmData.get("LAST_UPDATED_QUARTER");
					sLastUpdatedDate = hmData.get("LAST_UPDATED");

					if (null != sLastUpdatedDate && sLastUpdatedDate.equals(LocalDate.now().toString())) {
						System.out.println(
								"Company : " + hmData.get("COMPANY_NAME") + " is already updated / checked today.");
					} else if (cLastUpdated == null || sLastUpdatedDate == null
							|| !sLastUpdatedDate.equals(LocalDate.now().toString())) {

						System.out.println(
								"cLastUpdated - " + cLastUpdated + " getCurrentQuarter() : " + getCurrentQuarter());

						if (cLastUpdated == null || !cLastUpdated.equals(getCurrentQuarter())) {
							getStockData(sCompanyCode);
						} else {
							System.out.println("Company : " + hmData.get("COMPANY_NAME")
									+ " is already updated for current quarter.");
						}
					}
					return;
				}

			}
			// writeWorkBook();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static String getCurrentQuarter() {
		LocalDate myObj = LocalDate.now();
		myObj.getYear();
		int iMonth = myObj.getMonthValue();

		// System.out.println("month " + iMonth);

		if (3 < iMonth && iMonth < 7) {
			return (myObj.getYear() + 1) + "-1";
		} else if (6 < iMonth && iMonth < 10) {
			return (myObj.getYear() + 1) + "-2";
		} else if (9 < iMonth && iMonth < 13) {
			return (myObj.getYear() + 1) + "-3";
		} else if (0 < iMonth && iMonth < 4) {
			return myObj.getYear() + "-4";
		} else {
			return "null";
		}

	}

	private void getRatioTabData(HashMap<String, String> hmStockFinancials, HashMap<String, String> hmEV2EBITDA,
			HashMap<String, String> hmEV2EPSYearly, String sStandConsolidated) {

		String sInventoryTurnaroundRatio = null;
		String sEnterpriseValue1 = null;
		String sEnterpriseValue2 = null;
		String sEnterpriseValue3 = null;
		String sEnterpriseValue4 = null;
		String sEnterpriseValue5 = null;
		String sEV2EBITDA1 = null;
		String sEV2EBITDA2 = null;
		String sEV2EBITDA3 = null;
		String sEV2EBITDA4 = null;
		String sEV2EBITDA5 = null;
		String sBasicEPS1 = null;
		String sBasicEPS2 = null;
		String sBasicEPS3 = null;
		String sBasicEPS4 = null;
		String sBasicEPS5 = null;
		Float fEBITDA1 = 0f;
		Float fEBITDA2 = 0f;
		Float fEBITDA3 = 0f;
		Float fEBITDA4 = 0f;
		Float fEBITDA5 = 0f;
		Float fEBITDA_GROWTH_1 = 0f;
		Float fEBITDA_GROWTH_2 = 0f;
		Float fEBITDA_GROWTH_3 = 0f;
		Float fEBITDA_GROWTH_4 = 0f;
	
		Float fAVERAGE_EBITDA_GROWTH = 0f;

		Float fEXPECTED_EBITDA = 0f;
		Float fFORCASTED_EV = 0f;

		objSS.makeMeWait(2000);

		if ("consolidated".equals(sStandConsolidated)) {
			objSS.clickOnElementbyXpath("Consolidate", "//*[@id=\"#consolidated\"]");
			sInventoryTurnaroundRatio = objSS.getElementValuebyXpath("Inventory turn over Ratio",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[28]/td[2]");
			sEnterpriseValue1 = objSS.getElementValuebyXpath("Enterprise Value 1",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[37]/td[2]");
			sEnterpriseValue2 = objSS.getElementValuebyXpath("Enterprise Value 2",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[37]/td[3]");
			sEnterpriseValue3 = objSS.getElementValuebyXpath("Enterprise Value 3",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[37]/td[4]");
			sEnterpriseValue4 = objSS.getElementValuebyXpath("Enterprise Value 4",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[37]/td[5]");
			sEnterpriseValue5 = objSS.getElementValuebyXpath("Enterprise Value 5",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[37]/td[6]");
			sEV2EBITDA1 = objSS.getElementValuebyXpath("EV / EBITDA 1",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[39]/td[2]");
			sEV2EBITDA2 = objSS.getElementValuebyXpath("EV / EBITDA 1",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[39]/td[3]");
			sEV2EBITDA3 = objSS.getElementValuebyXpath("EV / EBITDA 1",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[39]/td[4]");
			sEV2EBITDA4 = objSS.getElementValuebyXpath("EV / EBITDA 1",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[39]/td[5]");
			sEV2EBITDA5 = objSS.getElementValuebyXpath("EV / EBITDA 1",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[39]/td[6]");
			sBasicEPS1 = objSS.getElementValuebyXpath("Basic EPS 1 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[3]/td[2]");
			sBasicEPS2 = objSS.getElementValuebyXpath("Basic EPS 2 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[3]/td[3]");
			sBasicEPS3 = objSS.getElementValuebyXpath("Basic EPS 3 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[3]/td[4]");
			sBasicEPS4 = objSS.getElementValuebyXpath("Basic EPS 4 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[3]/td[5]");
			sBasicEPS5 = objSS.getElementValuebyXpath("Basic EPS 5 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[3]/td[6]");
		} else {
			sInventoryTurnaroundRatio = objSS.getElementValuebyXpath("Inventory turn over Ratio",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[27]/td[2]");
			sEnterpriseValue1 = objSS.getElementValuebyXpath("Enterprise Value 1",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[33]/td[2]");
			sEnterpriseValue2 = objSS.getElementValuebyXpath("Enterprise Value 2",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[33]/td[3]");
			sEnterpriseValue3 = objSS.getElementValuebyXpath("Enterprise Value 3",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[33]/td[4]");
			sEnterpriseValue4 = objSS.getElementValuebyXpath("Enterprise Value 4",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[33]/td[5]");
			sEnterpriseValue5 = objSS.getElementValuebyXpath("Enterprise Value 5",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[33]/td[6]");
			sEV2EBITDA1 = objSS.getElementValuebyXpath("EV / EBITDA 1",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[35]/td[2]");
			sEV2EBITDA2 = objSS.getElementValuebyXpath("EV / EBITDA 1",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[35]/td[3]");
			sEV2EBITDA3 = objSS.getElementValuebyXpath("EV / EBITDA 1",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[35]/td[4]");
			sEV2EBITDA4 = objSS.getElementValuebyXpath("EV / EBITDA 1",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[35]/td[5]");
			sEV2EBITDA5 = objSS.getElementValuebyXpath("EV / EBITDA 1",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[35]/td[6]");
			sBasicEPS1 = objSS.getElementValuebyXpath("Basic EPS 1 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[3]/td[2]");
			sBasicEPS2 = objSS.getElementValuebyXpath("Basic EPS 2 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[3]/td[3]");
			sBasicEPS3 = objSS.getElementValuebyXpath("Basic EPS 3 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[3]/td[4]");
			sBasicEPS4 = objSS.getElementValuebyXpath("Basic EPS 4 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[3]/td[5]");
			sBasicEPS5 = objSS.getElementValuebyXpath("Basic EPS 5 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[3]/td[6]");
		}

		// System.out.println("Inventory turn over Ratio" + sInventoryTurnaroundRatio);

		hmStockFinancials.put("INVENTORY_TURNOVER_RATIO", sInventoryTurnaroundRatio);

		hmEV2EBITDA.put("ENTERPRISE_VALUE1", sEnterpriseValue1);
		hmEV2EBITDA.put("ENTERPRISE_VALUE2", sEnterpriseValue2);
		hmEV2EBITDA.put("ENTERPRISE_VALUE3", sEnterpriseValue3);
		hmEV2EBITDA.put("ENTERPRISE_VALUE4", sEnterpriseValue4);
		hmEV2EBITDA.put("ENTERPRISE_VALUE5", sEnterpriseValue5);

		hmEV2EBITDA.put("EV_BY_EBITDA1", sEV2EBITDA1);
		hmEV2EBITDA.put("EV_BY_EBITDA2", sEV2EBITDA2);
		hmEV2EBITDA.put("EV_BY_EBITDA3", sEV2EBITDA3);
		hmEV2EBITDA.put("EV_BY_EBITDA4", sEV2EBITDA4);
		hmEV2EBITDA.put("EV_BY_EBITDA5", sEV2EBITDA5);

		fEBITDA1 = Float.parseFloat(sEnterpriseValue1) / Float.parseFloat(sEV2EBITDA1);
		fEBITDA2 = Float.parseFloat(sEnterpriseValue2) / Float.parseFloat(sEV2EBITDA2);
		fEBITDA3 = Float.parseFloat(sEnterpriseValue3) / Float.parseFloat(sEV2EBITDA3);
		fEBITDA4 = Float.parseFloat(sEnterpriseValue4) / Float.parseFloat(sEV2EBITDA4);
		fEBITDA5 = Float.parseFloat(sEnterpriseValue5) / Float.parseFloat(sEV2EBITDA5);

		
		hmEV2EBITDA.put("EBITDA1", checkIfNaN(fEBITDA1));
		hmEV2EBITDA.put("EBITDA2", checkIfNaN(fEBITDA2));
		hmEV2EBITDA.put("EBITDA3", checkIfNaN(fEBITDA3));
		hmEV2EBITDA.put("EBITDA4", checkIfNaN(fEBITDA4));
		hmEV2EBITDA.put("EBITDA5", checkIfNaN(fEBITDA5));

		fEBITDA_GROWTH_1 = (fEBITDA1 - fEBITDA2) / fEBITDA2;
		fEBITDA_GROWTH_2 = (fEBITDA2 - fEBITDA3) / fEBITDA3;
		fEBITDA_GROWTH_3 = (fEBITDA3 - fEBITDA4) / fEBITDA4;
		fEBITDA_GROWTH_4 = (fEBITDA4 - fEBITDA5) / fEBITDA5;

		hmEV2EBITDA.put("EBITDA_GROWTH_1", checkIfNaN(fEBITDA_GROWTH_1));
		hmEV2EBITDA.put("EBITDA_GROWTH_2", checkIfNaN(fEBITDA_GROWTH_2));
		hmEV2EBITDA.put("EBITDA_GROWTH_3", checkIfNaN(fEBITDA_GROWTH_3));
		hmEV2EBITDA.put("EBITDA_GROWTH_4", checkIfNaN(fEBITDA_GROWTH_4));

		fAVERAGE_EBITDA_GROWTH = computeAverage(fEBITDA_GROWTH_1, fEBITDA_GROWTH_2 , fEBITDA_GROWTH_3 , fEBITDA_GROWTH_4);

		hmEV2EBITDA.put("AVERAGE_EBITDA_GROWTH", checkIfNaN(fAVERAGE_EBITDA_GROWTH));

		fEXPECTED_EBITDA = fEBITDA1 + (fEBITDA1 * fAVERAGE_EBITDA_GROWTH / 100);
		hmEV2EBITDA.put("EXPECTED_EBITDA", checkIfNaN(fEXPECTED_EBITDA));
		fFORCASTED_EV = Float.parseFloat(sEV2EBITDA1) * fEXPECTED_EBITDA;
		hmEV2EBITDA.put("FORCASTED_EV", checkIfNaN(fFORCASTED_EV));
		
		hmEV2EPSYearly.put("Y_EPS_1", sBasicEPS1);
		hmEV2EPSYearly.put("Y_EPS_2", sBasicEPS2);
		hmEV2EPSYearly.put("Y_EPS_3", sBasicEPS3);
		hmEV2EPSYearly.put("Y_EPS_4", sBasicEPS4);
		hmEV2EPSYearly.put("Y_EPS_5", sBasicEPS5);

		// Basic EPS
		objSS.clickOnElementbyXpath("Quarterly Results",
				"//*[@id=\"sec_quotes\"]/div[2]/div/div[1]/div[3]/div/div/nav/div/ul/li[8]/ul/li[3]/a");

	}
	
	private Float computeAverage(Float f1, Float f2, Float f3, Float f4) {
		Float fAverage = 0f;
		int iCount = 0;
		if (!f1.isNaN()) {
			fAverage = fAverage + f1;
			iCount ++;
		}
		if (!f2.isNaN()) {
			fAverage = fAverage + f2;
			iCount ++;
		}
		if (!f3.isNaN()) {
			fAverage = fAverage + f3;
			iCount ++;
		}
		if (!f4.isNaN()) {
			fAverage = fAverage + f4;
			iCount ++;
		}
		if (iCount > 0) {
			return fAverage / iCount;
		} else {
			return 0f;
		}
		
	}
	private String checkIfNaN (Float f) {
		return f.isNaN()?"-999999":f.toString();
	}

	private static void computeEV2EBITDAValuation(HashMap<String, String> hmStockFinancials,
			HashMap<String, String> hmEV2EBITDA) {
		Float fTARGET_PRICE = 0f;
		Float fTARGET_PRICE_WITH_BORROWING = 0f;
		Float fENTRY_PRICE_1BY4 = 0f;
		Float fENTRY_PRICE__WITH_BORROWING_1BY4 = 0f;
		Float fENTRY_PRICE_1BY3 = 0f;
		Float fENTRY_PRICE__WITH_BORROWING_1BY3 = 0f;
		Float fDIFFERENCE = 0f;
		Float fDIFFERENCE_WITH_BORROWING = 0f;
		Float fCurrentPrice = Float.parseFloat(hmStockFinancials.get("CURRENT_PRICE"));

		fTARGET_PRICE = Float.parseFloat(hmEV2EBITDA.get("FORCASTED_EV"))
				/ Float.parseFloat(hmEV2EBITDA.get("OUTSTANDING_SHARES"));
		fTARGET_PRICE_WITH_BORROWING = (Float.parseFloat(hmEV2EBITDA.get("LONG_TERM_BORROWINGS"))
				- Float.parseFloat(hmEV2EBITDA.get("FORCASTED_EV")))
				/ Float.parseFloat(hmEV2EBITDA.get("OUTSTANDING_SHARES"));
		fENTRY_PRICE_1BY4 = fTARGET_PRICE * 75 / 100;
		fENTRY_PRICE__WITH_BORROWING_1BY4 = fTARGET_PRICE_WITH_BORROWING * 75 / 100;
		fENTRY_PRICE_1BY3 = fTARGET_PRICE * 66 / 100;
		fENTRY_PRICE__WITH_BORROWING_1BY3 = fTARGET_PRICE_WITH_BORROWING * 66 / 100;
		fDIFFERENCE = (fTARGET_PRICE - fCurrentPrice) / fCurrentPrice * 100;
		fDIFFERENCE_WITH_BORROWING = (fTARGET_PRICE_WITH_BORROWING - fCurrentPrice) / fCurrentPrice * 100;
		hmEV2EBITDA.put("TARGET_PRICE", fTARGET_PRICE.toString());
		hmEV2EBITDA.put("TARGET_PRICE_WITH_BORROWING", fTARGET_PRICE_WITH_BORROWING.toString());
		hmEV2EBITDA.put("ENTRY_PRICE_1BY4", fENTRY_PRICE_1BY4.toString());
		hmEV2EBITDA.put("ENTRY_PRICE__WITH_BORROWING_1BY4", fENTRY_PRICE__WITH_BORROWING_1BY4.toString());
		hmEV2EBITDA.put("ENTRY_PRICE_1BY3", fENTRY_PRICE_1BY3.toString());
		hmEV2EBITDA.put("ENTRY_PRICE__WITH_BORROWING_1BY3", fENTRY_PRICE__WITH_BORROWING_1BY3.toString());
		hmEV2EBITDA.put("DIFFERENCE", fDIFFERENCE.toString());
		hmEV2EBITDA.put("DIFFERENCE_WITH_BORROWING", fDIFFERENCE_WITH_BORROWING.toString());
	}

	private static void computeEPSValuation(HashMap<String, String> hmStockFinancials,
			HashMap<String, String> hmEV2EPS, String sQ_Y) {
		Float fBasicEPS1 = 0f;
		Float fBasicEPS2 = 0f;
		Float fBasicEPS3 = 0f;
		Float fBasicEPS4 = 0f;
		Float fBasicEPS5 = 0f;

		Float avg_growth_1 = 0f;
		Float avg_growth_2 = 0f;
		Float avg_growth_3 = 0f;
		Float avg_growth_4 = 0f;

		Float fEPS_growth = 0f;
		Float fForward_EPs = 0f;
		Float fCurrent_pe = 0f;
		Float fForward_pe = 0f;
		Float fDifference_in_PE_pct = 0f;
		Float fTarget_price = 0f;

		Float fCurrentPrice = Float.parseFloat(hmStockFinancials.get("CURRENT_PRICE"));

		fBasicEPS5 = Float.parseFloat(hmEV2EPS.get(sQ_Y+"_EPS_5"));
		fBasicEPS4 = Float.parseFloat(hmEV2EPS.get(sQ_Y+"_EPS_4"));
		fBasicEPS3 = Float.parseFloat(hmEV2EPS.get(sQ_Y+"_EPS_3"));
		fBasicEPS2 = Float.parseFloat(hmEV2EPS.get(sQ_Y+"_EPS_2"));
		fBasicEPS1 = Float.parseFloat(hmEV2EPS.get(sQ_Y+"_EPS_1"));

		avg_growth_4 = (fBasicEPS5 - fBasicEPS4) / fBasicEPS4 * 100 * sign(fBasicEPS4);
		avg_growth_3 = (fBasicEPS4 - fBasicEPS3) / fBasicEPS3 * 100 * sign(fBasicEPS3);
		avg_growth_2 = (fBasicEPS3 - fBasicEPS2) / fBasicEPS2 * 100 * sign(fBasicEPS2);
		avg_growth_1 = (fBasicEPS2 - fBasicEPS1) / fBasicEPS1 * 100 * sign(fBasicEPS1);

		fEPS_growth = (avg_growth_1 + avg_growth_2 + avg_growth_3 + avg_growth_4) / 4;
		fForward_EPs = fBasicEPS5 + (fBasicEPS5 * fEPS_growth);
		fCurrent_pe = fCurrentPrice / fBasicEPS5;
		fForward_pe = fCurrentPrice / fForward_EPs;
		fDifference_in_PE_pct = (fCurrent_pe - fForward_pe) / fCurrent_pe * 100;
		fTarget_price = fCurrentPrice + (fCurrentPrice * fDifference_in_PE_pct / 100);

		hmEV2EPS.put(sQ_Y+"_avg_growth_1", avg_growth_1.toString());
		hmEV2EPS.put(sQ_Y+"_avg_growth_2", avg_growth_2.toString());
		hmEV2EPS.put(sQ_Y+"_avg_growth_3", avg_growth_3.toString());
		hmEV2EPS.put(sQ_Y+"_avg_growth_4", avg_growth_4.toString());
		hmEV2EPS.put(sQ_Y+"_EPS_growth", fEPS_growth.toString());
		hmEV2EPS.put(sQ_Y+"_forward_EPs", fForward_EPs.toString());
		hmEV2EPS.put(sQ_Y+"_current_pe", fCurrent_pe.toString());
		hmEV2EPS.put(sQ_Y+"_forward_pe", fForward_pe.toString());
		hmEV2EPS.put(sQ_Y+"_difference_in_PE_pct", fDifference_in_PE_pct.toString());
		hmEV2EPS.put(sQ_Y+"_target_price", fTarget_price.toString());

	}

	private static float sign(Float x) {
		return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;
	}

	private void getQuarterlyResults(HashMap<String, String> hmStockFinancials,
			HashMap<String, String> hmEV2EPSQuarterly, String sStandConsolidated) {
		String sBasicEPS1 = null;
		String sBasicEPS2 = null;
		String sBasicEPS3 = null;
		String sBasicEPS4 = null;
		String sBasicEPS5 = null;
		Float fEPS = 0f;
		if ("consolidated".equals(sStandConsolidated)) {
			objSS.clickOnElementbyXpath("Consolidate", "//*[@id=\"#consolidated\"]");
			sBasicEPS1 = objSS.getElementValuebyXpath("Basic EPS 1 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[37]/td[2]");
			sBasicEPS2 = objSS.getElementValuebyXpath("Basic EPS 2 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[37]/td[3]");
			sBasicEPS3 = objSS.getElementValuebyXpath("Basic EPS 3 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[37]/td[4]");
			sBasicEPS4 = objSS.getElementValuebyXpath("Basic EPS 4 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[37]/td[5]");
			sBasicEPS5 = objSS.getElementValuebyXpath("Basic EPS 5 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[37]/td[6]");
		} else {
			sBasicEPS1 = objSS.getElementValuebyXpath("Basic EPS 1 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[34]/td[2]");
			sBasicEPS2 = objSS.getElementValuebyXpath("Basic EPS 2 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[34]/td[3]");
			sBasicEPS3 = objSS.getElementValuebyXpath("Basic EPS 3 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[34]/td[4]");
			sBasicEPS4 = objSS.getElementValuebyXpath("Basic EPS 4 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[34]/td[5]");
			sBasicEPS5 = objSS.getElementValuebyXpath("Basic EPS 5 ",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[37]/td[6]");
		}

		fEPS = Float.parseFloat(sBasicEPS1) + Float.parseFloat(sBasicEPS2) + Float.parseFloat(sBasicEPS3)
				+ Float.parseFloat(sBasicEPS4);
		hmStockFinancials.put("EARNING_PER_SHARE", fEPS.toString());
		hmEV2EPSQuarterly.put("Q_EPS_1", sBasicEPS1);
		hmEV2EPSQuarterly.put("Q_EPS_2", sBasicEPS2);
		hmEV2EPSQuarterly.put("Q_EPS_3", sBasicEPS3);
		hmEV2EPSQuarterly.put("Q_EPS_4", sBasicEPS4);
		hmEV2EPSQuarterly.put("Q_EPS_5", sBasicEPS5);

		// Long term borrowings
		objSS.clickOnElementbyXpath("Balance Sheet",
				"//*[@id=\"sec_quotes\"]/div[2]/div/div[1]/div[3]/div/div/nav/div/ul/li[8]/ul/li[1]/a");
	}

	private void getBalanceSheetData(HashMap<String, String> hmEV2EBITDA, String sStandConsolidated) {
		String sLongTermBorrowings = null;
		if ("consolidated".equals(sStandConsolidated)) {
			objSS.makeMeWait(500);
			objSS.clickOnElementbyXpath("Consolidate", "//*[@id=\"#consolidated\"]");
			sLongTermBorrowings = objSS.getElementValuebyXpath("Long term borrowings",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[12]/td[2]");
		} else {
			sLongTermBorrowings = objSS.getElementValuebyXpath("Long term borrowings",
					"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[11]/td[2]");
		}
		hmEV2EBITDA.put("LONG_TERM_BORROWINGS", sLongTermBorrowings);

		// no of shares
		objSS.makeMeWait(500);
		objSS.clickOnElementbyXpath("Capital Structure",
				"//*[@id=\"sec_quotes\"]/div[2]/div/div[1]/div[3]/div/div/nav/div/ul/li[8]/ul/li[9]/a");
	}

	private void getCapitalStructureData(HashMap<String, String> hmEV2EBITDA) {
		String sNoOfShares = null;

		sNoOfShares = objSS.getElementValuebyXpath("Shares",
				"//*[@id=\"mc_content\"]/div[2]/div/div[2]/div[3]/table/tbody/tr[1]/td[5]");
		System.out.println("sNoOfShares " + sNoOfShares + " in number " + Float.parseFloat(sNoOfShares) / 10000000);

		hmEV2EBITDA.put("OUTSTANDING_SHARES", Float.toString(Float.parseFloat(sNoOfShares) / 10000000));
	}

	private void getShareHoldingPattern(HashMap<String, String> hmStockFinancials) {
		String sPromoterHolding = null;
		String sPromoterPledge = null;

		WebElement weSVG = null;
		WebElement webelmt = objSS.findElementByXPath("//*[@id=\"Promoter\"]");
		String[] sChartValues = new String[12];
		int iChartValue = 0;
		try {

			if (null != webelmt) {
				// System.out.println(strElementCommonName + " webelmt.isDisplayed() " +
				// webelmt.isDisplayed() + " string " + webelmt.toString());
				objSS.action.moveToElement(webelmt);
				objSS.wait.until(ExpectedConditions.visibilityOf(webelmt));
				objSS.action.moveToElement(webelmt);
				// System.out.println(webelmt.getText());

				weSVG = webelmt.findElement(By.className("highcharts-root"));

				// System.out.println("svg " + weSVG.getText());
				StringTokenizer st = new StringTokenizer(weSVG.getText(), System.lineSeparator());
				String strValue = null;
				String strPreviousValue = null;
				do {
					strPreviousValue = strValue;
					strValue = st.nextToken();
					sChartValues[iChartValue++] = strValue;
				} while (!"Holding(%)".equals(strValue));
				st.nextToken(); // skip - Pledges as % of promoter shares(%)

				iChartValue = 0;

				do {
					strPreviousValue = strValue;
					strValue = st.nextToken();
					iChartValue++;
				} while (!"0".equals(strValue));

				if (isDataForCurrentQuarter(strPreviousValue)) {
					iChartValue = iChartValue - 2;

					sPromoterHolding = sChartValues[iChartValue].substring(0, sChartValues[iChartValue].length() / 2);
					if (null != sChartValues[(iChartValue * 2) + 1]) {
						sPromoterPledge = sChartValues[(iChartValue * 2) + 1].substring(0,
								sChartValues[(iChartValue * 2) + 1].length() / 2);
					} else {
						sPromoterPledge = "0";
					}

					sChartValues[0] = strPreviousValue;
					// System.out.println("Last bar x-axis value " + strPreviousValue + "
					// iChartValue - " + iChartValue);
					// sPromoterPledge = getElementValuebyXpath("Promoter Pledge"
					// ,"//*[@id=\"highcharts-wch2im6-13\"]/svg/g[7]/g[5]/text/tspan[2]");
					System.out.println(
							" sPromoterHolding - " + sPromoterHolding + " sPromoterPledge - " + sPromoterPledge);

					hmStockFinancials.put("PROMOTER_SHARE_HOLDING", sPromoterHolding);
					hmStockFinancials.put("PROMOTER_PLEDGE", sPromoterPledge);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private boolean checkIfCurrentQuarterResultsAreAvailable(String sStandConsolidated) {
		String sLatestQuarterResults = null;
		String[] sChartValue = null;
		sChartValue = getLastUpdatedQuarter("Last Quarter data", "//*[@id=\"C-3-revenue\"]/div");
		sLatestQuarterResults = sChartValue[1];

		return isDataForCurrentQuarter(sLatestQuarterResults);
		/*
		 * if("consolidated".equals(sStandConsolidated)) {
		 * clickOnElementbyXpath("Quarterly Results"
		 * ,"//*[@id=\"consolidated\"]/div[2]/div[2]/div/ul/li[3]/a");
		 * changeBrowserTab();
		 * clickOnElementbyXpath("Consolidate","//*[@id=\"#consolidated\"]");
		 * sLatestQuarterResults = getElementValuebyXpath("Latest Quarter Results"
		 * ,"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[1]/td[2]"); } else {
		 * clickOnElementbyXpath("Quarterly Results"
		 * ,"//*[@id=\"standalone\"]/div[2]/div[2]/div/ul/li[3]/a"); changeBrowserTab();
		 * sLatestQuarterResults = getElementValuebyXpath("Latest Quarter Results"
		 * ,"//*[@id=\"standalone-new\"]/div[1]/table/tbody/tr[1]/td[2]"); }
		 * 
		 * closeOtherTabs();
		 */
		/*
		 * sCurrentQuarter = getCurrentQuarter();
		 * 
		 * System.out.println("Current Quarter - " + sCurrentQuarter +
		 * " sLatestQuarterResults - " + sLatestQuarterResults + " Year "+
		 * String.valueOf(LocalDate.now().getYear()).substring(2)); if
		 * (sCurrentQuarter.endsWith("-1") && sLatestQuarterResults.startsWith("MAR") &&
		 * sLatestQuarterResults.endsWith(String.valueOf(LocalDate.now().getYear()).
		 * substring(2))) return true; if (sCurrentQuarter.endsWith("-2") &&
		 * sLatestQuarterResults.startsWith("JUN") &&
		 * sLatestQuarterResults.endsWith(String.valueOf(LocalDate.now().getYear()).
		 * substring(2))) return true; if (sCurrentQuarter.endsWith("-3") &&
		 * sLatestQuarterResults.startsWith("SEP") &&
		 * sLatestQuarterResults.endsWith(String.valueOf(LocalDate.now().getYear()).
		 * substring(2))) return true; if (sCurrentQuarter.endsWith("-4") &&
		 * sLatestQuarterResults.startsWith("DEC") &&
		 * sLatestQuarterResults.endsWith(String.valueOf(LocalDate.now().getYear()-1).
		 * substring(2))) return true; System.out.println("Latest Results available " +
		 * sLatestQuarterResults); return false;
		 */
	}

	private static boolean isDataForCurrentQuarter(String sLatestQuarterResults) {

		String sCurrentQuarter = getCurrentQuarter();

		if (null == sLatestQuarterResults)
			return false;

		sLatestQuarterResults = sLatestQuarterResults.toUpperCase();

		System.out.println("Current Quarter - " + sCurrentQuarter + " sLatestQuarterResults - " + sLatestQuarterResults
				+ " Year " + String.valueOf(LocalDate.now().getYear()).substring(2));
		if (sCurrentQuarter.endsWith("-1") && sLatestQuarterResults.startsWith("MAR")
				&& sLatestQuarterResults.endsWith(String.valueOf(LocalDate.now().getYear()).substring(2)))
			return true;
		if (sCurrentQuarter.endsWith("-2") && sLatestQuarterResults.startsWith("JUN")
				&& sLatestQuarterResults.endsWith(String.valueOf(LocalDate.now().getYear()).substring(2)))
			return true;
		if (sCurrentQuarter.endsWith("-3") && sLatestQuarterResults.startsWith("SEP")
				&& sLatestQuarterResults.endsWith(String.valueOf(LocalDate.now().getYear()).substring(2)))
			return true;
		if (sCurrentQuarter.endsWith("-4") && sLatestQuarterResults.startsWith("DEC")
				&& sLatestQuarterResults.endsWith(String.valueOf(LocalDate.now().getYear() - 1).substring(2)))
			return true;
		System.out.println("Latest Results available " + sLatestQuarterResults);
		return false;
	}

}

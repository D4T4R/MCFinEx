/**
 * This code is only for education purpose only. No financial transactions should be made based on the data generated by this code.
 */

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFFormulaEvaluator;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.utils.DBUtils;

public class PopulateExcelFromDB {
	
	private static XSSFWorkbook workbook = null;
	private static FileInputStream file = null;
	private static String sXLXPath = "E:\\Selenium\\Selenium\\SSP_Working_from_DB.xlsx";

	private static String sGetResults = "select * from stock_master a, stock_financials b,stock_ev2ebitda_valuations c, "
			+ "STOCK_EPS_QUARTERLY_VALUATIONS d, STOCK_EPS_YEARLY_VALUATIONS e where a.companycode= b.companycode and "
			+ "a.companycode= c.companycode and a.companycode= d.companycode and a.companycode= e.companycode order by 1";  

	private static String sFileOutputLocation = "E://StockData.csv";

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		PopulateExcelFromDB objPopulateExcelFromDB = new PopulateExcelFromDB();
		objPopulateExcelFromDB.populateExcelSheet();
	}

	private void populateData() {

		DBUtils objDBUtils = new DBUtils();
		ArrayList<HashMap<String, String>> alData;
		Iterator<HashMap<String, String>> iList = null;
		HashMap<String, String> hmData = null;
		StringBuffer sbData = new StringBuffer();

		// Iterate through each rows one by one
		/*
		 * Iterator<Row> rowIterator = sheet.iterator(); while (rowIterator.hasNext())
		 * Row row = rowIterator.next();
		 */
		// XSSFSheet sheet = openExcelSheet(sBrowser);

		alData = objDBUtils.getResults(sGetResults);

		iList = alData.iterator();

		while (iList.hasNext()) {
			hmData = iList.next();
			if (sbData.length() == 0) {
				sbData.append(String.join(",", hmData.keySet())).append(System.lineSeparator());
			}

			hmData = iList.next();
			try {
				sbData.append(String.join(",", hmData.values())).append(System.lineSeparator());
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		try {
			File fout = new File(sFileOutputLocation);
			FileOutputStream fos = new FileOutputStream(fout);

			BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));
			bw.write(sbData.toString());
			bw.close();
			fos.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	
	private void populateExcelSheet () {
		
		int iRowCount = 3;
		DBUtils objDBUtils = new DBUtils();
		ArrayList<HashMap<String, String>> alData;
		Iterator<HashMap<String, String>> iList = null;
		HashMap<String, String> hmData = null;
		boolean bValueSet = false; 		

		try {
			// Iterate through each rows one by one
			/*
			 * Iterator<Row> rowIterator = sheet.iterator(); while (rowIterator.hasNext())
			 * Row row = rowIterator.next();
			 */
			XSSFSheet sheet = openExcelSheet();
			

			// Iterate through each rows one by one
			/*
			 * Iterator<Row> rowIterator = sheet.iterator(); while (rowIterator.hasNext())
			 * Row row = rowIterator.next();
			 */
			// XSSFSheet sheet = openExcelSheet(sBrowser);

			alData = objDBUtils.getResults(sGetResults);

			iList = alData.iterator();

			while (iList.hasNext()) {
				hmData = iList.next();
				String sCompanyCode = hmData.get("COMPANYCODE");
				String sWorkbookCompanyCode = null; 
				bValueSet = false;
				iRowCount = 3;
				while (null != workbook.getSheetAt(0).getRow(iRowCount)) {
					sWorkbookCompanyCode = workbook.getSheetAt(0).getRow(iRowCount).getCell(1).getStringCellValue();
					if (sCompanyCode != null && (null == sWorkbookCompanyCode || 0 == sWorkbookCompanyCode.length())) {
						workbook.getSheetAt(0).getRow(iRowCount).getCell(1).setCellValue(sCompanyCode);
						setValuesToExcelColumns(sheet, iRowCount, hmData);
						break;
					}
					if (sCompanyCode != null && sCompanyCode.equals(sWorkbookCompanyCode)) {
						 setValuesToExcelColumns(sheet, iRowCount, hmData);
						 bValueSet = true;
						 break;
					}					
					iRowCount++;
				}
				
			}
			writeWorkBook();
			
		} catch (Exception e) {
			writeWorkBook();
			e.printStackTrace();
		}
		
	}
	
	private static XSSFSheet openExcelSheet()   {
        try {

        	file = new FileInputStream(new File(sXLXPath));
        	System.out.println(file.available());
            // Create Workbook instance holding reference to .xlsx file
        	workbook = new XSSFWorkbook(file);

            // Get first/desired sheet from the workbook
            file.close();
            return workbook.getSheetAt(0);
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

	
	private static void writeWorkBook() {
 		try {
 			System.out.println("Updating file " + sXLXPath);
 			FileOutputStream fOutputXLS = new FileOutputStream(new File(sXLXPath));
 			workbook.getCreationHelper().createFormulaEvaluator().evaluateAll();
 			workbook.write(fOutputXLS);
 			fOutputXLS.close();
 			System.out.println("File updated");
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
 		
 	}
	
	private static void setValuesToExcelColumns(XSSFSheet sheet, int iRowCount, HashMap<String, String> hmData) {
		System.out.println(hmData.get("COMPANY_NAME"));
		sheet.getRow(iRowCount).getCell(2).setCellValue(hmData.get("COMPANY_NAME"));
		sheet.getRow(iRowCount).getCell(35).setCellValue(parseFloat(hmData.get("CURRENT_PRICE")));
		sheet.getRow(iRowCount).getCell(38).setCellValue(parseFloat(hmData.get("INDUSTRY_PE")));
		sheet.getRow(iRowCount).getCell(41).setCellValue(parseFloat(hmData.get("BOOK_VALUE_PER_SHARE")));
		sheet.getRow(iRowCount).getCell(44).setCellValue(parseFloat(hmData.get("DIVIDEND_YIELD")));
		sheet.getRow(iRowCount).getCell(116).setCellValue(parseFloat(hmData.get("MARKET_CAPITAL")));
		sheet.getRow(iRowCount).getCell(117).setCellValue(hmData.get("SECTOR"));
		sheet.getRow(iRowCount).getCell(118).setCellValue(hmData.get("LAST_UPDATED_QUARTER"));
		sheet.getRow(iRowCount).getCell(120).setCellValue(hmData.get("ISIN_CODE"));
		
		//update last updated on
		sheet.getRow(iRowCount).getCell(119).setCellValue(hmData.get("LAST_UPDATED"));
		sheet.getRow(iRowCount).getCell(8).setCellValue(parseFloat(hmData.get("CAPITAL")));
		sheet.getRow(iRowCount).getCell(7).setCellValue(parseFloat(hmData.get("RESERVES")));
		sheet.getRow(iRowCount).getCell(13).setCellValue(parseFloat(hmData.get("CURRENT_LIABILITY")));
		sheet.getRow(iRowCount).getCell(12).setCellValue(parseFloat(hmData.get("OTHER_LIABILITY")));
		sheet.getRow(iRowCount).getCell(22).setCellValue(parseFloat(hmData.get("TOTAL_LIABILITY")));
		sheet.getRow(iRowCount).getCell(17).setCellValue(parseFloat(hmData.get("CURRENT_ASSET")));
		sheet.getRow(iRowCount).getCell(21).setCellValue(parseFloat(hmData.get("EBIT")));
		
		sheet.getRow(iRowCount).getCell(29).setCellValue(parseFloat(hmData.get("OPERATING_CASHFLOW")));
		sheet.getRow(iRowCount).getCell(30).setCellValue(parseFloat(hmData.get("INVESTING_CASHFLOW")));
		sheet.getRow(iRowCount).getCell(31).setCellValue(parseFloat(hmData.get("FINANCING_CASHFLOW"))); 
		sheet.getRow(iRowCount).getCell(26).setCellValue(parseFloat(hmData.get("INVENTORY_TURNOVER_RATIO")));
		sheet.getRow(iRowCount).getCell(46).setCellValue(parseFloat(hmData.get("ENTERPRISE_VALUE1")));
		sheet.getRow(iRowCount).getCell(47).setCellValue(parseFloat(hmData.get("ENTERPRISE_VALUE2")));
		sheet.getRow(iRowCount).getCell(48).setCellValue(parseFloat(hmData.get("ENTERPRISE_VALUE3")));
		sheet.getRow(iRowCount).getCell(49).setCellValue(parseFloat(hmData.get("ENTERPRISE_VALUE4")));
		sheet.getRow(iRowCount).getCell(50).setCellValue(parseFloat(hmData.get("ENTERPRISE_VALUE5")));
		sheet.getRow(iRowCount).getCell(51).setCellValue(parseFloat(hmData.get("EV_BY_EBITDA1")));
		sheet.getRow(iRowCount).getCell(52).setCellValue(parseFloat(hmData.get("EV_BY_EBITDA2")));
		sheet.getRow(iRowCount).getCell(53).setCellValue(parseFloat(hmData.get("EV_BY_EBITDA3")));
		sheet.getRow(iRowCount).getCell(54).setCellValue(parseFloat(hmData.get("EV_BY_EBITDA4")));
		sheet.getRow(iRowCount).getCell(55).setCellValue(parseFloat(hmData.get("EV_BY_EBITDA5")));
		sheet.getRow(iRowCount).getCell(81).setCellValue(parseFloat(hmData.get("Y_EPS_1")));
		sheet.getRow(iRowCount).getCell(82).setCellValue(parseFloat(hmData.get("Y_EPS_2")));
		sheet.getRow(iRowCount).getCell(83).setCellValue(parseFloat(hmData.get("Y_EPS_3")));
		sheet.getRow(iRowCount).getCell(84).setCellValue(parseFloat(hmData.get("Y_EPS_4")));
		sheet.getRow(iRowCount).getCell(85).setCellValue(parseFloat(hmData.get("Y_EPS_5")));
		
		sheet.getRow(iRowCount).getCell(36).setCellValue(parseFloat(hmData.get("EARNING_PER_SHARE")));
		sheet.getRow(iRowCount).getCell(98).setCellValue(parseFloat(hmData.get("Q_EPS_1")));
		sheet.getRow(iRowCount).getCell(99).setCellValue(parseFloat(hmData.get("Q_EPS_2")));
		sheet.getRow(iRowCount).getCell(100).setCellValue(parseFloat(hmData.get("Q_EPS_3")));
		sheet.getRow(iRowCount).getCell(101).setCellValue(parseFloat(hmData.get("Q_EPS_4")));
		sheet.getRow(iRowCount).getCell(102).setCellValue(parseFloat(hmData.get("Q_EPS_5"))); 
		
		sheet.getRow(iRowCount).getCell(68).setCellValue(parseFloat(hmData.get("LONG_TERM_BORROWINGS")));
		sheet.getRow(iRowCount).getCell(70).setCellValue(parseFloat(hmData.get("OUTSTANDING_SHARES")));
		sheet.getRow(iRowCount).getCell(3).setCellValue(parseFloat(hmData.get("PROMOTER_SHARE_HOLDING")));
	 	sheet.getRow(iRowCount).getCell(4).setCellValue(parseFloat(hmData.get("PROMOTER_PLEDGE")));
	 		
	}
	
	
	private static float parseFloat(String sValue) {
		if(null == sValue || 0 == sValue.length()) {
			return 0f;
		}
		return Float.parseFloat(sValue);
	} 
}
